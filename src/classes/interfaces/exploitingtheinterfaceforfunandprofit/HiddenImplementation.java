package classes.interfaces.exploitingtheinterfaceforfunandprofit;

import java.lang.reflect.Method;

import classes.interfaces.exploitingtheinterfaceforfunandprofit.hiddenc.HiddenC;

public class HiddenImplementation {
    @SuppressWarnings("GrazieInspection")
    public static void main(String[] args) throws Exception {
        IA a = HiddenC.makeA();
        a.methodFromA();

        System.out.printf("a is implemented as %s%n", a.getClass().getName());

        // Compile error. C is not accessible outside the package.
        // if(a instanceof C) { C c = (C) a; c.publicMethodFromC(); }

        // Reflection still allows us to call publicMethodFromC()
        System.out.println("Using reflection");
        callHiddenMethod(a, "publicMethodFromC");
        // Even methods that are less accessible
        callHiddenMethod(a, "packageAccessMethodFromC");
        callHiddenMethod(a, "protectedMethodFromC");
        callHiddenMethod(a, "privateMethodFromC");
    }

    private static void callHiddenMethod(Object object, String methodName) throws Exception {
        Method m = object.getClass().getDeclaredMethod(methodName);
        m.setAccessible(true);
        m.invoke(object);
    }
}
