/**
 * Java 
 * 
 * @author:  Rub√©n Hortas Astariz <http://rubenhortas.blogspot.com.es>
 * @contact: rubenhortas at gmail.com
 * @web:     http://www.rubenhortas.blogspot.com.es
 * @github:  http://github.com/rubenhortas
 * @license: CC BY-NC-SA 3.0 <http://creativecommons.org/licenses/by-nc-sa/3.0/>
 * @file:    HiddenImplementation.java
 */

package exploitingTheInterfaceForFunAndProfit;

import java.lang.reflect.Method;

import exploitingTheInterfaceForFunAndProfit.HiddenC.HiddenC;



public class HiddenImplementation {

	public static void main(String[] args) throws Exception {
		IA a = HiddenC.makeA();
		a.methodFromA();

		System.out.println(String.format("a is implemented as %s", a.getClass()
				.getName()));

		/** Compile error. C is not accesible outside the package. **/
		/*
		 * if(a instanceof C) { C c = (C) a; c.publicMethodFromC(); }
		 */

		/** Reflection still allows us to call publicMethodFromC() **/
		System.out.println("Using reflection");
		callHiddenMethod(a, "publicMethodFromC");
		/** Even methods that are less accessible **/
		callHiddenMethod(a, "packageAccessMethodFromC");
		callHiddenMethod(a, "protectedMethodFromC");
		callHiddenMethod(a, "privateMethodFromC");
	}
	
	private static void callHiddenMethod(Object object, String methodName) throws Exception {
		Method m = object.getClass().getDeclaredMethod(methodName);
		m.setAccessible(true);
		m.invoke(object);
	}
}
